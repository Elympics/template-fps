variables:
  BUILD_NAME: ShooterTemplate
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  GIT_SUBMODULE_STRATEGY: normal
  GIT_STRATEGY: fetch
  GIT_DEPTH: 10
  CI_APP_VERSION: 0.1.0
  VERSION_NUMBER_VAR: 0.1.0
  ANSIBLE_INVENTORY: staging
  ANSIBLE_DIRECTORY: "deploy/ansible"
  PROJECT_FOLDER_NAME: ElympicsShooter
  CI_REMOTE_PROJECT_PATH: dev
  IMAGE: unityci/editor
  IMAGE_VERSION: 1
  UNITY_DIR: $CI_PROJECT_DIR/ElympicsShooter
  VERSION_BUILD_VAR: $CI_PIPELINE_IID

stages:
  - prepare
  - build
  - deploy

default:
  tags:
    - docker

# =================== COMMON ===================

.cond:build:dev:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $UNITY_LICENSE != null'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $UNITY_LICENSE != null'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $UNITY_LICENSE != null'

.cond:build:anyfull:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $UNITY_LICENSE != null'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $UNITY_LICENSE != null'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $UNITY_LICENSE != null'

.cond:deploy:dev:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $UNITY_LICENSE != null'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $UNITY_LICENSE != null'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $UNITY_LICENSE != null'
      when: manual

.env:unity:
  image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION
  tags:
    - docker-local

.env:deploy:
  image: quay.io/ansible/ansible-runner:latest
  tags:
    - docker

get-unity-version:
  extends:
    - .cond:build:anyfull
  image: alpine
  stage: prepare
  variables:
    GIT_DEPTH: 1
  script:
    - echo UNITY_VERSION=$(cat $UNITY_DIR/ProjectSettings/ProjectVersion.txt | grep "m_EditorVersion:.*" | awk '{ print $2}') | tee prepare.env
  artifacts:
    reports:
      dotenv: prepare.env

## License

.prepare_ssh: &prepare_ssh |-
  eval $(ssh-agent -s)
  echo "$DEPLOY_SSH_KEY" | tr -d '\r' | ssh-add -
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  echo "$SSH_CONFIG" >> ~/.ssh/config
  echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  chmod 644 ~/.ssh/config
  chmod 644 ~/.ssh/known_hosts

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
  needs:
    - job: get-unity-version
      artifacts: true

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - $UNITY_DIR/Library/

.unity_defaults: &unity_defaults
  <<:
    - *unity_before_script
    - *cache
  image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION
  tags:
    - docker-local

get-activation-file:
  <<: *unity_before_script
  extends:
    - .env:unity
  rules:
    - if: '$UNITY_LICENSE == null'
      when: manual
  stage: prepare
  script:
    - chmod +x ./ci/get_activation_file.sh && ./ci/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min

.build: &build
  stage: build
  <<: *unity_defaults
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    paths:
      - $UNITY_DIR/Builds/

build:server:
  stage: build
  <<: *unity_defaults
  script:
    - chmod +x ./ci/build_and_upload_to_elympics.sh && ./ci/build_and_upload_to_elympics.sh
  extends:
    - .cond:build:anyfull

.build:dev:
  <<: *build
  extends:
    - .cond:build:dev

.deploy:
  stage: deploy
  extends:
    - .env:deploy
  before_script:
    - *prepare_ssh
    - cat $ANSIBLE_STG_HOST > $ANSIBLE_DIRECTORY/inventories/$ANSIBLE_INVENTORY/host_vars/srv.yml
  script:
    - ansible-playbook -i $ANSIBLE_DIRECTORY/inventories/$ANSIBLE_INVENTORY $ANSIBLE_DIRECTORY/$ANSIBLE_COMMAND.yml

.deploy:start:
  extends: .deploy
  variables:
    ANSIBLE_COMMAND: deploy

.deploy:stop:
  extends: .deploy
  variables:
    ANSIBLE_COMMAND: remove

# =================== CLIENTS =======================

# For webgl support, you need to set Compression Format to Disabled for v0.9. See https://github.com/game-ci/docker/issues/75
.build:client:web:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-webgl-$IMAGE_VERSION
  # Temporary workaround for https://github.com/game-ci/docker/releases/tag/v0.9 and webgl support in current project to prevent errors with missing ffmpeg
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
    - apt-get update && apt-get install ffmpeg python python-pip python-brotli -y
  variables:
    BUILD_TARGET: WebGL
  environment:
    name: $CI_REMOTE_PROJECT_PATH
    url: https://$DEPLOY_DOMAIN
    action: prepare

build:client:web:dev:
  extends:
    - .build:dev
    - .build:client:web

# =================== DEPLOY =======================

.deploy:web:start:
  extends:
    - .deploy:start
  environment:
    name: $CI_REMOTE_PROJECT_PATH
    url: https://$DEPLOY_DOMAIN
    action: start

deploy:web:dev:
  extends:
    - .deploy:web:start
    - .cond:deploy:dev
  needs:
    - job: build:client:web:dev
      artifacts: true
    - job: build:server
      artifacts: false
